# This workflow will build and deploy a .NET project to AWS Elastic Beanstalk
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Deploy-Production

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_LOCATION: LCDE_no_report.sln
  ELASTIC_BEANSTALK_NAME: ${{ secrets.AWS_EB_APPLICATION_NAME }}
  ELASTIC_BEANSTALK_ENV_NAME: ${{ secrets.AWS_EB_ENVIRONMENT_NAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x

    - name: Restore dependencies
      run: dotnet restore ${{ env.PROJECT_LOCATION }}

    - name: Create environment file
      run: |
        echo "DB_SERVER=${{ secrets.DB_SERVER }}" >> .env
        echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
        echo "DB_USER=${{ secrets.DB_USER }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env

    - name: Replace placeholders in appsettings.json
      run: |
        cat LCDE/appsettings.json | envsubst > LCDE/appsettings.temp.json
        mv LCDE/appsettings.temp.json LCDE/appsettings.json

      env:
        DB_SERVER: ${{ secrets.DB_SERVER }}
        DB_DATABASE: ${{ secrets.DB_DATABASE }}
        DB_USER: ${{ secrets.DB_USER }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

    - name: Build
      run: dotnet build --no-restore ${{ env.PROJECT_LOCATION }}

    - name: Pack
      run: |
        dotnet publish ${{ env.PROJECT_LOCATION }} -c Release --output "${{ github.workspace }}/${{github.run_id}}"
        cd ${{github.run_id}}
        zip -r ../${{github.run_id}}.zip .

    - name: Upload Artifacts
      uses: actions/upload-artifact@v4.3.3
      with: 
        name: deploy-files
        path: ${{github.run_id}}.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - uses: actions/download-artifact@v4.1.7
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    - name: Deploy to Elastic Beanstalk
      run: |
        aws s3 cp "deploy-files/${{github.run_id}}.zip" s3://elasticbeanstalk-${{ env.AWS_REGION }}-${{ secrets.AWS_ACCOUNT_ID }}/artifact/dotnet-mvc-app/
        aws elasticbeanstalk create-application-version --application-name ${{ env.ELASTIC_BEANSTALK_NAME }} --version-label ${{ github.run_id }} --description ${{ github.run_id }} --source-bundle S3Bucket="elasticbeanstalk-${{ env.AWS_REGION }}-${{ secrets.AWS_ACCOUNT_ID }}",S3Key="artifact/dotnet-mvc-app/${{ github.run_id }}.zip"
        aws elasticbeanstalk update-environment --application-name ${{ env.ELASTIC_BEANSTALK_NAME }} --environment-name ${{ env.ELASTIC_BEANSTALK_ENV_NAME }} --version-label ${{ github.run_id }}
        aws elasticbeanstalk wait environment-updated --application-name ${{ env.ELASTIC_BEANSTALK_NAME }} --environment-name ${{ env.ELASTIC_BEANSTALK_ENV_NAME }}