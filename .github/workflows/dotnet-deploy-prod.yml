# This workflow will build, create a Docker image and deploy a .NET project via SSH
name: Deploy-Production

on:
  push:
    branches: [ "deploy-prod" ]
  pull_request:
    branches: [ "deploy-prod" ]

env:
  PROJECT_LOCATION: LCDE_no_report.sln
  APPSETTINGS_PATH: LCDE/appsettings.json
  SSH_SERVER_IP: ${{ secrets.SSH_SERVER_IP }}
  SSH_SERVER_USER: ${{ secrets.SSH_SERVER_USER }}
  SSH_SERVER_PASSWORD: ${{ secrets.SSH_SERVER_PASSWORD }}
  DOCKER_IMAGE_NAME: lcde_net_app

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Install envsubst
      run: sudo apt-get update && sudo apt-get install -y gettext

    - name: Replace placeholders in appsettings.json
      run: |
        export AppUrl=${{ secrets.AppUrl }}
        export HOST=${{ secrets.HOST }}
        export PORT=${{ secrets.PORT }}
        export USERNAME=${{ secrets.USERNAME }}
        export PASSWORD=$(echo "${{ secrets.PASSWORD }}" | sed 's/\*/ /g')
        export DB_SERVER=${{ secrets.DB_SERVER }}
        export DB_DATABASE=${{ secrets.DB_DATABASE }}
        export DB_USER=${{ secrets.DB_USER }}
        export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
        export AZ_STORE_ACC_NAME=${{ secrets.AZ_STORE_ACC_NAME }}
        export AZ_STORE_ACC_KEY=${{ secrets.AZ_STORE_ACC_KEY }}
        export PAYPAL_USER=${{ secrets.PAYPAL_USER }}
        export PAYPAL_PASSWORD=${{ secrets.PAYPAL_PASSWORD }}
        export INVOICE_DIR=${{ secrets.INVOICE_DIR }}
        envsubst < ${{ env.APPSETTINGS_PATH }} > ${{ env.APPSETTINGS_PATH }}.temp
        mv ${{ env.APPSETTINGS_PATH }}.temp ${{ env.APPSETTINGS_PATH }}

    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ github.run_id }} -f Dockerfile ./LCDE

    - name: Save Docker image to tar file
      run: |
        docker save ${{ env.DOCKER_IMAGE_NAME }}:${{ github.run_id }} -o ${{ env.DOCKER_IMAGE_NAME }}_${{ github.run_id }}.tar

    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass

    - name: Copy Docker image to server via SSH
      run: |
        sshpass -p "${{ secrets.SSH_SERVER_PASSWORD }}" scp -o StrictHostKeyChecking=no ${{ env.DOCKER_IMAGE_NAME }}_${{ github.run_id }}.tar ${{ secrets.SSH_SERVER_USER }}@${{ secrets.SSH_SERVER_IP }}:/home/${{ secrets.SSH_SERVER_USER }}/

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Install sshpass
      run: sudo apt-get update && sudo apt-get install -y sshpass

    - name: Load and run Docker container on server via SSH
      run: |
        sshpass -p "${{ secrets.SSH_SERVER_PASSWORD }}" ssh -T -o StrictHostKeyChecking=no ${{ secrets.SSH_SERVER_USER }}@${{ secrets.SSH_SERVER_IP }} << EOF
          # Eliminar cualquier contenedor existente
          docker ps -a --filter "name=${{ env.DOCKER_IMAGE_NAME }}" --format "{{.ID}}" | xargs -r docker stop
          docker ps -a --filter "name=${{ env.DOCKER_IMAGE_NAME }}" --format "{{.ID}}" | xargs -r docker rm

          # Eliminar cualquier imagen existente
          docker images --filter=reference='${{ env.DOCKER_IMAGE_NAME }}*' --format "{{.ID}}" | xargs -r docker rmi

          # Cargar la nueva imagen Docker
          docker load -i /home/${{ secrets.SSH_SERVER_USER }}/${{ env.DOCKER_IMAGE_NAME }}_${{ github.run_id }}.tar

          # Ejecutar el contenedor
          docker run -d --name ${{ env.DOCKER_IMAGE_NAME }}_${{ github.run_id }} -p 8080:80 ${{ env.DOCKER_IMAGE_NAME }}:${{ github.run_id }}

          # Mostrar contenedores y logs
          docker ps -a
          docker logs ${{ env.DOCKER_IMAGE_NAME }}_${{ github.run_id }}
        EOF